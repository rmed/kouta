#pragma once

#include <string_view>

namespace kouta::utils
{
    /// @brief Interface defining logging capabilities for the library.
    ///
    /// @details
    /// The purpose of this library is to allow kouta elements (or any other) to use an application-specific logger. The
    /// idea is to have an intermediate object implement this interface so that messages generated by the library can be
    /// logged as part of the application with the appropriate levels.
    class ILogger
    {
    public:
        /// @brief Log a message with DEBUG (or equivalent) level.
        ///
        /// @param[in] msg          Message to log.
        virtual void debug(std::string_view msg) = 0;

        /// @brief Log a message with INFO (or equivalent) level.
        ///
        /// @param[in] msg          Message to log.
        virtual void info(std::string_view msg) = 0;

        /// @brief Log a message with WARNING (or equivalent) level.
        ///
        /// @param[in] msg          Message to log.
        virtual void warning(std::string_view msg) = 0;

        /// @brief Log a message with ERROR (or equivalent) level.
        ///
        /// @param[in] msg          Message to log.
        virtual void error(std::string_view msg) = 0;

        /// @brief Log a message with CRITICAL (or equivalent) level.
        ///
        /// @param[in] msg          Message to log.
        virtual void critical(std::string_view msg) = 0;
    };
}  // namespace kouta::utils
